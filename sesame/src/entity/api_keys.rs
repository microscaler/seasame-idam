//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.1


use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "api_keys")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub api_key_id: Uuid,
    pub user_id: Uuid,
    #[sea_orm(column_type = "Text")]
    pub key_hash: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub description: Option<String>,
    pub created_at: DateTimeWithTimeZone,
    pub expires_at: Option<DateTimeWithTimeZone>,
    pub revoked: bool,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::api_key_rate_limits::Entity")]
    ApiKeyRateLimits,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::UserId",
        to = "super::users::Column::UserId",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Users,
}

impl Related<super::api_key_rate_limits::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ApiKeyRateLimits.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl Related<super::rate_limit_policies::Entity> for Entity {
    fn to() -> RelationDef {
        super::api_key_rate_limits::Relation::RateLimitPolicies.def()
    }

    fn via() -> Option<RelationDef> {
        Some(super::api_key_rate_limits::Relation::ApiKeys.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
