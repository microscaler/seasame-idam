//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.1


use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "rate_limit_policies")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub policy_id: i32,
    #[sea_orm(column_type = "Text")]
    pub name: String,
    #[sea_orm(column_type = "Text")]
    pub scope: String,
    pub limit_count: i32,
    pub window_sec: i32,
    #[sea_orm(column_type = "Text", nullable)]
    pub description: Option<String>,
    pub created_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::api_key_rate_limits::Entity")]
    ApiKeyRateLimits,
    #[sea_orm(has_many = "super::rate_limit_assignments::Entity")]
    RateLimitAssignments,
    #[sea_orm(has_many = "super::rate_limit_counters::Entity")]
    RateLimitCounters,
}

impl Related<super::api_key_rate_limits::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ApiKeyRateLimits.def()
    }
}

impl Related<super::rate_limit_assignments::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RateLimitAssignments.def()
    }
}

impl Related<super::rate_limit_counters::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RateLimitCounters.def()
    }
}

impl Related<super::api_keys::Entity> for Entity {
    fn to() -> RelationDef {
        super::api_key_rate_limits::Relation::ApiKeys.def()
    }

    fn via() -> Option<RelationDef> {
        Some(
            super::api_key_rate_limits::Relation::RateLimitPolicies
                .def()
                .rev(),
        )
    }
}

impl ActiveModelBehavior for ActiveModel {}
