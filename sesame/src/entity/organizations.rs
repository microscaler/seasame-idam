//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.1


use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "organizations")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub org_id: Uuid,
    #[sea_orm(column_type = "Text")]
    pub org_name: String,
    #[sea_orm(column_type = "JsonBinary", nullable)]
    pub org_metadata: Option<Json>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::audit_logs::Entity")]
    AuditLogs,
    #[sea_orm(has_many = "super::identity_providers::Entity")]
    IdentityProviders,
    #[sea_orm(has_many = "super::login_attempts::Entity")]
    LoginAttempts,
    #[sea_orm(has_many = "super::metrics_events::Entity")]
    MetricsEvents,
    #[sea_orm(has_many = "super::org_login_methods::Entity")]
    OrgLoginMethods,
    #[sea_orm(has_many = "super::permissions::Entity")]
    Permissions,
    #[sea_orm(has_many = "super::rate_limit_assignments::Entity")]
    RateLimitAssignments,
    #[sea_orm(has_many = "super::rate_limit_counters::Entity")]
    RateLimitCounters,
    #[sea_orm(has_many = "super::roles::Entity")]
    Roles,
    #[sea_orm(has_many = "super::scim_clients::Entity")]
    ScimClients,
    #[sea_orm(has_many = "super::user_organization_info::Entity")]
    UserOrganizationInfo,
}

impl Related<super::audit_logs::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AuditLogs.def()
    }
}

impl Related<super::identity_providers::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::IdentityProviders.def()
    }
}

impl Related<super::login_attempts::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::LoginAttempts.def()
    }
}

impl Related<super::metrics_events::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MetricsEvents.def()
    }
}

impl Related<super::org_login_methods::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::OrgLoginMethods.def()
    }
}

impl Related<super::permissions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Permissions.def()
    }
}

impl Related<super::rate_limit_assignments::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RateLimitAssignments.def()
    }
}

impl Related<super::rate_limit_counters::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RateLimitCounters.def()
    }
}

impl Related<super::roles::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Roles.def()
    }
}

impl Related<super::scim_clients::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ScimClients.def()
    }
}

impl Related<super::user_organization_info::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserOrganizationInfo.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        super::user_organization_info::Relation::Users.def()
    }

    fn via() -> Option<RelationDef> {
        Some(super::user_organization_info::Relation::Organizations.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
