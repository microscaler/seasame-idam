//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.1


use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "users")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub user_id: Uuid,
    #[sea_orm(column_type = "Text", nullable)]
    pub legacy_user_id: Option<String>,
    #[sea_orm(column_type = "Text", unique)]
    pub email: String,
    pub email_confirmed: bool,
    #[sea_orm(column_type = "Text", unique)]
    pub username: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub first_name: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub last_name: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub picture_url: Option<String>,
    #[sea_orm(column_type = "JsonBinary", nullable)]
    pub properties: Option<Json>,
    pub has_password: bool,
    pub update_password_required: bool,
    pub locked: bool,
    pub enabled: bool,
    pub mfa_enabled: bool,
    pub can_create_orgs: bool,
    pub created_at: i64,
    pub last_active_at: i64,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::api_keys::Entity")]
    ApiKeys,
    #[sea_orm(has_many = "super::audit_logs::Entity")]
    AuditLogs,
    #[sea_orm(has_many = "super::email_verification_tokens::Entity")]
    EmailVerificationTokens,
    #[sea_orm(has_many = "super::login_attempts::Entity")]
    LoginAttempts,
    #[sea_orm(has_many = "super::metrics_events::Entity")]
    MetricsEvents,
    #[sea_orm(has_many = "super::mfa_devices::Entity")]
    MfaDevices,
    #[sea_orm(has_many = "super::password_reset_tokens::Entity")]
    PasswordResetTokens,
    #[sea_orm(has_many = "super::rate_limit_assignments::Entity")]
    RateLimitAssignments,
    #[sea_orm(has_many = "super::rate_limit_counters::Entity")]
    RateLimitCounters,
    #[sea_orm(has_many = "super::sessions::Entity")]
    Sessions,
    #[sea_orm(has_many = "super::user_organization_info::Entity")]
    UserOrganizationInfo,
    #[sea_orm(has_many = "super::user_roles::Entity")]
    UserRoles,
}

impl Related<super::api_keys::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ApiKeys.def()
    }
}

impl Related<super::audit_logs::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AuditLogs.def()
    }
}

impl Related<super::email_verification_tokens::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::EmailVerificationTokens.def()
    }
}

impl Related<super::login_attempts::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::LoginAttempts.def()
    }
}

impl Related<super::metrics_events::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MetricsEvents.def()
    }
}

impl Related<super::mfa_devices::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::MfaDevices.def()
    }
}

impl Related<super::password_reset_tokens::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PasswordResetTokens.def()
    }
}

impl Related<super::rate_limit_assignments::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RateLimitAssignments.def()
    }
}

impl Related<super::rate_limit_counters::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RateLimitCounters.def()
    }
}

impl Related<super::sessions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Sessions.def()
    }
}

impl Related<super::user_organization_info::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserOrganizationInfo.def()
    }
}

impl Related<super::user_roles::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserRoles.def()
    }
}

impl Related<super::organizations::Entity> for Entity {
    fn to() -> RelationDef {
        super::user_organization_info::Relation::Organizations.def()
    }

    fn via() -> Option<RelationDef> {
        Some(super::user_organization_info::Relation::Users.def().rev())
    }
}

impl Related<super::roles::Entity> for Entity {
    fn to() -> RelationDef {
        super::user_roles::Relation::Roles.def()
    }

    fn via() -> Option<RelationDef> {
        Some(super::user_roles::Relation::Users.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
